name: CI/CD github Actions & Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## gradle caching (빌드 시간 줄이기)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # application.yml 생성
      - name: make application.yml
        if: contains(github.ref, 'main')
        run: |
          mkdir ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.YML }}" > ./application.yml
        shell: bash

      # gradle chmod
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker login
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build & push
        run: |
          docker build -t app .
          docker tag app ${{ secrets.DOCKER_USERNAME }}/advice_park:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/advice_park:latest

      # EC2 인스턴스에 배포
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 인스턴스 퍼블릭 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }} # pem 키

          # 도커 작업
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/advice_park:latest
            docker stop $(docker ps -a -q)
            docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/advice_park:latest
            docker rm $(docker ps --filter 'status=exited' -a -q)
            docker image prune -a -f

      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'

        # Beanstalk 플러그인을 사용
        # 미리 생성해둔 IAM 인증키를 사용
      - name: AWS Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: advice_park_EB
          environment_name: AdviceparkEB-env-1
          version_label: "Version ${{steps.build-number.outputs.BUILD_NUMBER}} deployed via github actions ${{ github.sha }}"
          region: ap-northeast-2
          deployment_package: Dockerrun.aws.json